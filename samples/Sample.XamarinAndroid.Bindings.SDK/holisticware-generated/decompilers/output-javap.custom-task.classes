Compiled from "ClientCalls.java"
final class io.grpc.stub.ClientCalls$CallToStreamObserverAdapter<T> extends io.grpc.stub.ClientCallStreamObserver<T> {
  io.grpc.stub.ClientCalls$CallToStreamObserverAdapter(io.grpc.ClientCall<T, ?>);
  public void onNext(T);
  public void onError(java.lang.Throwable);
  public void onCompleted();
  public boolean isReady();
  public void setOnReadyHandler(java.lang.Runnable);
  public void disableAutoInboundFlowControl();
  public void request(int);
  public void setMessageCompression(boolean);
  public void cancel(java.lang.String, java.lang.Throwable);
  static void access$000(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter);
  static boolean access$100(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter);
  static java.lang.Runnable access$200(io.grpc.stub.ClientCalls$CallToStreamObserverAdapter);
}
Compiled from "ServerCalls.java"
final class io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener extends io.grpc.ServerCall$Listener<ReqT> {
  final io.grpc.stub.ServerCalls$UnaryServerCallHandler this$0;
  io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl<ReqT, RespT>, io.grpc.ServerCall<ReqT, RespT>);
  public void onMessage(ReqT);
  public void onHalfClose();
  public void onCancel();
  public void onReady();
}
Compiled from "ServerCallStreamObserver.java"
public abstract class io.grpc.stub.ServerCallStreamObserver<V> extends io.grpc.stub.CallStreamObserver<V> {
  public io.grpc.stub.ServerCallStreamObserver();
  public abstract boolean isCancelled();
  public abstract void setOnCancelHandler(java.lang.Runnable);
  public abstract void setCompression(java.lang.String);
}
Compiled from "ServerCalls.java"
public interface io.grpc.stub.ServerCalls$ClientStreamingMethod<ReqT, RespT> extends io.grpc.stub.ServerCalls$StreamingRequestMethod<ReqT, RespT> {
}
Compiled from "StreamObservers.java"
final class io.grpc.stub.StreamObservers$1FlowControllingOnReadyHandler implements java.lang.Runnable {
  final io.grpc.stub.CallStreamObserver val$target;
  final java.util.Iterator val$source;
  io.grpc.stub.StreamObservers$1FlowControllingOnReadyHandler();
  public void run();
}
Compiled from "ServerCalls.java"
final class io.grpc.stub.ServerCalls$StreamingServerCallHandler<ReqT, RespT> implements io.grpc.ServerCallHandler<ReqT, RespT> {
  io.grpc.stub.ServerCalls$StreamingServerCallHandler(io.grpc.stub.ServerCalls$StreamingRequestMethod<ReqT, RespT>);
  public io.grpc.ServerCall$Listener<ReqT> startCall(io.grpc.ServerCall<ReqT, RespT>, io.grpc.Metadata);
}
Compiled from "ClientCalls.java"
final class io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter<ReqT, RespT> extends io.grpc.ClientCall$Listener<RespT> {
  io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter(io.grpc.stub.StreamObserver<RespT>, io.grpc.stub.ClientCalls$CallToStreamObserverAdapter<ReqT>, boolean);
  public void onHeaders(io.grpc.Metadata);
  public void onMessage(RespT);
  public void onClose(io.grpc.Status, io.grpc.Metadata);
  public void onReady();
}
Compiled from "ServerCalls.java"
public interface io.grpc.stub.ServerCalls$ServerStreamingMethod<ReqT, RespT> extends io.grpc.stub.ServerCalls$UnaryRequestMethod<ReqT, RespT> {
}
Compiled from "MetadataUtils.java"
final class io.grpc.stub.MetadataUtils$HeaderAttachingClientInterceptor$HeaderAttachingClientCall<ReqT, RespT> extends io.grpc.ForwardingClientCall$SimpleForwardingClientCall<ReqT, RespT> {
  final io.grpc.stub.MetadataUtils$HeaderAttachingClientInterceptor this$0;
  io.grpc.stub.MetadataUtils$HeaderAttachingClientInterceptor$HeaderAttachingClientCall(io.grpc.ClientCall<ReqT, RespT>);
  public void start(io.grpc.ClientCall$Listener<RespT>, io.grpc.Metadata);
}
Compiled from "MetadataUtils.java"
public final class io.grpc.stub.MetadataUtils {
  public static <T extends io.grpc.stub.AbstractStub<T>> T attachHeaders(T, io.grpc.Metadata);
  public static io.grpc.ClientInterceptor newAttachHeadersInterceptor(io.grpc.Metadata);
  public static <T extends io.grpc.stub.AbstractStub<T>> T captureMetadata(T, java.util.concurrent.atomic.AtomicReference<io.grpc.Metadata>, java.util.concurrent.atomic.AtomicReference<io.grpc.Metadata>);
  public static io.grpc.ClientInterceptor newCaptureMetadataInterceptor(java.util.concurrent.atomic.AtomicReference<io.grpc.Metadata>, java.util.concurrent.atomic.AtomicReference<io.grpc.Metadata>);
}
Compiled from "RpcMethod.java"
public interface io.grpc.stub.annotations.RpcMethod extends java.lang.annotation.Annotation {
  public abstract java.lang.String fullMethodName();
  public abstract java.lang.Class<?> requestType();
  public abstract java.lang.Class<?> responseType();
  public abstract io.grpc.MethodDescriptor$MethodType methodType();
}
Compiled from "AbstractStub.java"
public abstract class io.grpc.stub.AbstractStub<S extends io.grpc.stub.AbstractStub<S>> {
  protected io.grpc.stub.AbstractStub(io.grpc.Channel);
  protected io.grpc.stub.AbstractStub(io.grpc.Channel, io.grpc.CallOptions);
  public final io.grpc.Channel getChannel();
  public final io.grpc.CallOptions getCallOptions();
  protected abstract S build(io.grpc.Channel, io.grpc.CallOptions);
  public final S withDeadline(io.grpc.Deadline);
  public final S withDeadlineAfter(long, java.util.concurrent.TimeUnit);
  public final S withExecutor(java.util.concurrent.Executor);
  public final S withCompression(java.lang.String);
  public final S withChannel(io.grpc.Channel);
  public final <T> S withOption(io.grpc.CallOptions$Key<T>, T);
  public final S withInterceptors(io.grpc.ClientInterceptor...);
  public final S withCallCredentials(io.grpc.CallCredentials);
  public final S withWaitForReady();
  public final S withMaxInboundMessageSize(int);
  public final S withMaxOutboundMessageSize(int);
}
Compiled from "MetadataUtils.java"
final class io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor$MetadataCapturingClientCall$MetadataCapturingClientCallListener extends io.grpc.ForwardingClientCallListener$SimpleForwardingClientCallListener<RespT> {
  final io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor$MetadataCapturingClientCall this$1;
  io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor$MetadataCapturingClientCall$MetadataCapturingClientCallListener(io.grpc.ClientCall$Listener<RespT>);
  public void onHeaders(io.grpc.Metadata);
  public void onClose(io.grpc.Status, io.grpc.Metadata);
}
Compiled from "ServerCalls.java"
class io.grpc.stub.ServerCalls$NoopStreamObserver<V> implements io.grpc.stub.StreamObserver<V> {
  io.grpc.stub.ServerCalls$NoopStreamObserver();
  public void onNext(V);
  public void onError(java.lang.Throwable);
  public void onCompleted();
}
Compiled from "ClientCallStreamObserver.java"
public abstract class io.grpc.stub.ClientCallStreamObserver<V> extends io.grpc.stub.CallStreamObserver<V> {
  public io.grpc.stub.ClientCallStreamObserver();
  public abstract void cancel(java.lang.String, java.lang.Throwable);
}
Compiled from "ServerCalls.java"
public interface io.grpc.stub.ServerCalls$BidiStreamingMethod<ReqT, RespT> extends io.grpc.stub.ServerCalls$StreamingRequestMethod<ReqT, RespT> {
}
Compiled from "CallStreamObserver.java"
public abstract class io.grpc.stub.CallStreamObserver<V> implements io.grpc.stub.StreamObserver<V> {
  public io.grpc.stub.CallStreamObserver();
  public abstract boolean isReady();
  public abstract void setOnReadyHandler(java.lang.Runnable);
  public abstract void disableAutoInboundFlowControl();
  public abstract void request(int);
  public abstract void setMessageCompression(boolean);
}
Compiled from "ServerCalls.java"
interface io.grpc.stub.ServerCalls$StreamingRequestMethod<ReqT, RespT> {
  public abstract io.grpc.stub.StreamObserver<ReqT> invoke(io.grpc.stub.StreamObserver<RespT>);
}
Compiled from "ClientCalls.java"
final class io.grpc.stub.ClientCalls$ThreadlessExecutor implements java.util.concurrent.Executor {
  io.grpc.stub.ClientCalls$ThreadlessExecutor();
  public void waitAndDrain() throws java.lang.InterruptedException;
  public void execute(java.lang.Runnable);
  static {};
}
Compiled from "ClientCalls.java"
public final class io.grpc.stub.ClientCalls {
  static final boolean $assertionsDisabled;
  public static <ReqT, RespT> void asyncUnaryCall(io.grpc.ClientCall<ReqT, RespT>, ReqT, io.grpc.stub.StreamObserver<RespT>);
  public static <ReqT, RespT> void asyncServerStreamingCall(io.grpc.ClientCall<ReqT, RespT>, ReqT, io.grpc.stub.StreamObserver<RespT>);
  public static <ReqT, RespT> io.grpc.stub.StreamObserver<ReqT> asyncClientStreamingCall(io.grpc.ClientCall<ReqT, RespT>, io.grpc.stub.StreamObserver<RespT>);
  public static <ReqT, RespT> io.grpc.stub.StreamObserver<ReqT> asyncBidiStreamingCall(io.grpc.ClientCall<ReqT, RespT>, io.grpc.stub.StreamObserver<RespT>);
  public static <ReqT, RespT> RespT blockingUnaryCall(io.grpc.ClientCall<ReqT, RespT>, ReqT);
  public static <ReqT, RespT> RespT blockingUnaryCall(io.grpc.Channel, io.grpc.MethodDescriptor<ReqT, RespT>, io.grpc.CallOptions, ReqT);
  public static <ReqT, RespT> java.util.Iterator<RespT> blockingServerStreamingCall(io.grpc.ClientCall<ReqT, RespT>, ReqT);
  public static <ReqT, RespT> java.util.Iterator<RespT> blockingServerStreamingCall(io.grpc.Channel, io.grpc.MethodDescriptor<ReqT, RespT>, io.grpc.CallOptions, ReqT);
  public static <ReqT, RespT> com.google.common.util.concurrent.ListenableFuture<RespT> futureUnaryCall(io.grpc.ClientCall<ReqT, RespT>, ReqT);
  static {};
}
Compiled from "ServerCalls.java"
final class io.grpc.stub.ServerCalls$UnaryServerCallHandler<ReqT, RespT> implements io.grpc.ServerCallHandler<ReqT, RespT> {
  io.grpc.stub.ServerCalls$UnaryServerCallHandler(io.grpc.stub.ServerCalls$UnaryRequestMethod<ReqT, RespT>);
  public io.grpc.ServerCall$Listener<ReqT> startCall(io.grpc.ServerCall<ReqT, RespT>, io.grpc.Metadata);
  static io.grpc.stub.ServerCalls$UnaryRequestMethod access$000(io.grpc.stub.ServerCalls$UnaryServerCallHandler);
}
Compiled from "ClientCalls.java"
final class io.grpc.stub.ClientCalls$GrpcFuture<RespT> extends com.google.common.util.concurrent.AbstractFuture<RespT> {
  io.grpc.stub.ClientCalls$GrpcFuture(io.grpc.ClientCall<?, RespT>);
  protected void interruptTask();
  protected boolean set(RespT);
  protected boolean setException(java.lang.Throwable);
  protected java.lang.String pendingToString();
}
Compiled from "ServerCalls.java"
public interface io.grpc.stub.ServerCalls$UnaryMethod<ReqT, RespT> extends io.grpc.stub.ServerCalls$UnaryRequestMethod<ReqT, RespT> {
}
Compiled from "StreamObservers.java"
public final class io.grpc.stub.StreamObservers {
  public io.grpc.stub.StreamObservers();
  public static <V> void copyWithFlowControl(java.util.Iterator<V>, io.grpc.stub.CallStreamObserver<V>);
  public static <V> void copyWithFlowControl(java.lang.Iterable<V>, io.grpc.stub.CallStreamObserver<V>);
}
Compiled from "MetadataUtils.java"
final class io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor implements io.grpc.ClientInterceptor {
  final java.util.concurrent.atomic.AtomicReference<io.grpc.Metadata> headersCapture;
  final java.util.concurrent.atomic.AtomicReference<io.grpc.Metadata> trailersCapture;
  io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor(java.util.concurrent.atomic.AtomicReference<io.grpc.Metadata>, java.util.concurrent.atomic.AtomicReference<io.grpc.Metadata>);
  public <ReqT, RespT> io.grpc.ClientCall<ReqT, RespT> interceptCall(io.grpc.MethodDescriptor<ReqT, RespT>, io.grpc.CallOptions, io.grpc.Channel);
}
Compiled from "MetadataUtils.java"
final class io.grpc.stub.MetadataUtils$HeaderAttachingClientInterceptor implements io.grpc.ClientInterceptor {
  io.grpc.stub.MetadataUtils$HeaderAttachingClientInterceptor(io.grpc.Metadata);
  public <ReqT, RespT> io.grpc.ClientCall<ReqT, RespT> interceptCall(io.grpc.MethodDescriptor<ReqT, RespT>, io.grpc.CallOptions, io.grpc.Channel);
  static io.grpc.Metadata access$000(io.grpc.stub.MetadataUtils$HeaderAttachingClientInterceptor);
}
Compiled from "ServerCalls.java"
interface io.grpc.stub.ServerCalls$UnaryRequestMethod<ReqT, RespT> {
  public abstract void invoke(ReqT, io.grpc.stub.StreamObserver<RespT>);
}
Compiled from "ServerCalls.java"
final class io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener extends io.grpc.ServerCall$Listener<ReqT> {
  final io.grpc.stub.ServerCalls$StreamingServerCallHandler this$0;
  io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener(io.grpc.stub.StreamObserver<ReqT>, io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl<ReqT, RespT>, io.grpc.ServerCall<ReqT, RespT>);
  public void onMessage(ReqT);
  public void onHalfClose();
  public void onCancel();
  public void onReady();
}
Compiled from "ClientResponseObserver.java"
public interface io.grpc.stub.ClientResponseObserver<ReqT, RespT> extends io.grpc.stub.StreamObserver<RespT> {
  public abstract void beforeStart(io.grpc.stub.ClientCallStreamObserver<ReqT>);
}
Compiled from "MetadataUtils.java"
final class io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor$MetadataCapturingClientCall<ReqT, RespT> extends io.grpc.ForwardingClientCall$SimpleForwardingClientCall<ReqT, RespT> {
  final io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor this$0;
  io.grpc.stub.MetadataUtils$MetadataCapturingClientInterceptor$MetadataCapturingClientCall(io.grpc.ClientCall<ReqT, RespT>);
  public void start(io.grpc.ClientCall$Listener<RespT>, io.grpc.Metadata);
}
Compiled from "ClientCalls.java"
final class io.grpc.stub.ClientCalls$UnaryStreamToFuture<RespT> extends io.grpc.ClientCall$Listener<RespT> {
  io.grpc.stub.ClientCalls$UnaryStreamToFuture(io.grpc.stub.ClientCalls$GrpcFuture<RespT>);
  public void onHeaders(io.grpc.Metadata);
  public void onMessage(RespT);
  public void onClose(io.grpc.Status, io.grpc.Metadata);
}
Compiled from "ServerCalls.java"
final class io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl<ReqT, RespT> extends io.grpc.stub.ServerCallStreamObserver<RespT> {
  final io.grpc.ServerCall<ReqT, RespT> call;
  volatile boolean cancelled;
  io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl(io.grpc.ServerCall<ReqT, RespT>);
  public void setMessageCompression(boolean);
  public void setCompression(java.lang.String);
  public void onNext(RespT);
  public void onError(java.lang.Throwable);
  public void onCompleted();
  public boolean isReady();
  public void setOnReadyHandler(java.lang.Runnable);
  public boolean isCancelled();
  public void setOnCancelHandler(java.lang.Runnable);
  public void disableAutoInboundFlowControl();
  public void request(int);
  static void access$100(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl);
  static java.lang.Runnable access$200(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl);
  static java.lang.Runnable access$300(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl);
  static boolean access$400(io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl);
}
Compiled from "StreamObserver.java"
public interface io.grpc.stub.StreamObserver<V> {
  public abstract void onNext(V);
  public abstract void onError(java.lang.Throwable);
  public abstract void onCompleted();
}
Compiled from "ServerCalls.java"
public final class io.grpc.stub.ServerCalls {
  static final java.lang.String TOO_MANY_REQUESTS;
  static final java.lang.String MISSING_REQUEST;
  public static <ReqT, RespT> io.grpc.ServerCallHandler<ReqT, RespT> asyncUnaryCall(io.grpc.stub.ServerCalls$UnaryMethod<ReqT, RespT>);
  public static <ReqT, RespT> io.grpc.ServerCallHandler<ReqT, RespT> asyncServerStreamingCall(io.grpc.stub.ServerCalls$ServerStreamingMethod<ReqT, RespT>);
  public static <ReqT, RespT> io.grpc.ServerCallHandler<ReqT, RespT> asyncClientStreamingCall(io.grpc.stub.ServerCalls$ClientStreamingMethod<ReqT, RespT>);
  public static <ReqT, RespT> io.grpc.ServerCallHandler<ReqT, RespT> asyncBidiStreamingCall(io.grpc.stub.ServerCalls$BidiStreamingMethod<ReqT, RespT>);
  public static void asyncUnimplementedUnaryCall(io.grpc.MethodDescriptor<?, ?>, io.grpc.stub.StreamObserver<?>);
  public static <T> io.grpc.stub.StreamObserver<T> asyncUnimplementedStreamingCall(io.grpc.MethodDescriptor<?, ?>, io.grpc.stub.StreamObserver<?>);
}
Compiled from "ClientCalls.java"
final class io.grpc.stub.ClientCalls$BlockingResponseStream<T> implements java.util.Iterator<T> {
  io.grpc.stub.ClientCalls$BlockingResponseStream(io.grpc.ClientCall<?, T>);
  io.grpc.stub.ClientCalls$BlockingResponseStream(io.grpc.ClientCall<?, T>, io.grpc.stub.ClientCalls$ThreadlessExecutor);
  io.grpc.ClientCall$Listener<T> listener();
  public boolean hasNext();
  public T next();
  public void remove();
  static java.util.concurrent.BlockingQueue access$300(io.grpc.stub.ClientCalls$BlockingResponseStream);
}
Compiled from "ClientCalls.java"
final class io.grpc.stub.ClientCalls$BlockingResponseStream$QueuingListener extends io.grpc.ClientCall$Listener<T> {
  final io.grpc.stub.ClientCalls$BlockingResponseStream this$0;
  io.grpc.stub.ClientCalls$BlockingResponseStream$QueuingListener(io.grpc.stub.ClientCalls$BlockingResponseStream);
  public void onHeaders(io.grpc.Metadata);
  public void onMessage(T);
  public void onClose(io.grpc.Status, io.grpc.Metadata);
}

